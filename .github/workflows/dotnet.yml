name: .NET

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      dd_trace_repo:
        description: "DD-Trace repository (org/repo)"
        required: false
        default: "DataDog/dd-trace-dotnet"
      dd_trace_branch:
        description: "Branch in dd-trace-dotnet fork to test"
        required: true
        default: "master"

env:
  DD_TRACE_BRANCH: ${{ github.event.inputs.dd_trace_branch || 'master' }}
  DD_TRACE_REPO: ${{ github.event.inputs.dd_trace_repo || 'DataDog/dd-trace-dotnet' }}
  DD_ENV: ci
  DD_SERVICE: testing-playground
  DD_VERSION: ${{ github.sha }}
  DD_CIVISIBILITY_IMPACTED_TESTS_DETECTION_ENABLED: true
  DD_TRACE_DEBUG: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Clone and build DD-Trace
        run: |
          echo "Cloning DD-Trace from $DD_TRACE_REPO branch $DD_TRACE_BRANCH"
          set -x
          # git clone https://github.com/$DD_TRACE_REPO.git dd-trace-dotnet
          # cd dd-trace-dotnet
          # git checkout $DD_TRACE_BRANCH

          # # Install dependencies
          # echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          # sudo apt update
          # sudo apt install -y nfpm build-essential cmake cppcheck clang-tidy patchelf

          # # Navigate to the tracer directory where the build scripts are located
          # cd tracer

          # # Build the tracer using Nuke
          # chmod +x build.sh
          # ./build.sh Clean BuildTracerHome
          # ./build.sh PackageTracerHome

          # # Path to the directory containing the generated .nupkg
          # # This path is relative to the 'tracer' directory
          # echo "DD_TRACE_NUPKG_DIR_PATH=$PWD/bin/artifacts/nuget" >> $GITHUB_ENV
          # echo "Nupkg directory will be: $PWD/bin/artifacts/nuget"     

          # Set environment variables for the tracer
          echo "CORECLR_ENABLE_PROFILING=1" >> $GITHUB_ENV
          echo "CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}" >> $GITHUB_ENV
          echo "CORECLR_PROFILER_PATH=$PWD/bin/tracer-home/Datadog.Trace.ClrProfiler.Native.so" >> $GITHUB_ENV
          echo "DD_TRACE_ENABLED=true" >> $GITHUB_ENV
          echo "DD_LOGS_INJECTION=true" >> $GITHUB_ENV
          echo "DD_PROFILING_ENABLED=false" >> $GITHUB_ENV
          echo "DD_TRACE_DEBUG=true" >> $GITHUB_ENV

          # Enable CI visibility
          echo "DD_CIVISIBILITY_ENABLED=true" >> $GITHUB_ENV
          echo "DD_CIVISIBILITY_AGENTLESS_ENABLED=true" >> $GITHUB_ENV

          # Set API key if available
          if [ -n "${{ secrets.DD_API_KEY }}" ]; then
            echo "DD_API_KEY=${{ secrets.DD_API_KEY }}" >> $GITHUB_ENV
            echo "DD_SITE=${{ secrets.DD_SITE || 'datadoghq.com' }}" >> $GITHUB_ENV
            echo "API key configured, traces will be sent to Datadog"
          else
            echo "No API key found, running in local mode only"
          fi

          # Log to console for debugging
          echo "DD_TRACE_DEBUG=true" >> $GITHUB_ENV

      - name: Install custom dd-trace tool
        run: |
          mkdir -p ./.local-tools
          LOCAL_TOOLS_PATH="$PWD/.local-tools"
          # DD_TRACE_NUPKG_DIR_PATH is an absolute path from the previous step
          echo "Installing dd-trace tool from $(pwd)"

          # List files to debug which nupkg is available
          ls -l "$(pwd)"

          # Install the specific tool package. The package ID is Datadog.Trace.Tools.dd_trace
          # The --add-source needs to point to the directory containing the .nupkg
          # The tool install command will pick the .nupkg from the source
          dotnet tool install --tool-path "${LOCAL_TOOLS_PATH}" --add-source "$(pwd)" dd-trace

          echo "${LOCAL_TOOLS_PATH}" >> $GITHUB_PATH # Add local tools directory to PATH for this job
          echo "Custom dd-trace tool installed to ${LOCAL_TOOLS_PATH}"
          ls -la "${LOCAL_TOOLS_PATH}"

          # Verify the tool is callable and is your version
          # "${LOCAL_TOOLS_PATH}"/dd-trace --version

      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: |
          echo "--- Running Tests with Custom dd-trace ---"
          echo "Datadog Service: ${DD_SERVICE}"
          echo "Datadog Env: ${DD_ENV}"
          echo "Datadog Version: ${DD_VERSION}"
          echo "Datadog Site: ${{ secrets.DD_SITE || 'datadoghq.com' }}"

          "$(pwd)/.local-tools/dd-trace" ci run -- dotnet test --no-build --verbosity normal
